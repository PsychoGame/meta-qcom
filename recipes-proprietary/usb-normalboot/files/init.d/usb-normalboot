#!/bin/sh
#
# Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE DISCLAIMED.  IN NO
# EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Starts the USB Android Gadget.
export KERNEL=`uname -r`

case "$1" in
    start)
        if [ -d /sys/class/android_usb/android0/f_ffs ]
        then
            echo adb > /sys/class/android_usb/android0/f_ffs/aliases
        fi
        
        # get soc platform to update product related information
        if [ -f /sys/devices/soc0/hw_platform ]; then
            socplatform=`cat /sys/devices/soc0/machine` 2> /dev/null
            soc_hwplatform=`cat /sys/devices/soc0/hw_platform`
        else
            socplatform=`cat /sys/devices/system/soc/soc0/machine` 2> /dev/null
        fi
        
        # find serialno from cmdline
        cmdline=`cat /proc/cmdline` 2> /dev/null
        strsearch="androidboot.serialno="
        if echo "$cmdline" | grep -q "$strsearch"; then
            startsearch=${cmdline#*$strsearch}
            pos=$(( ${#cmdline} - ${#startsearch}))
            serialno=${cmdline:$pos:8}
        else
            echo "serialno not found with cmdline, use default"
            serialno="12345678"
        fi
        
        msm_serial=`cat /sys/devices/soc0/serial_number`
        msm_serial_hex=`printf %08X $msm_serial`
        product_string="$socplatform-$soc_hwplatform _SN:$msm_serial_hex"
        
        # try to mount configfs, and create instance of USB functions if it goes through
        mount -t configfs none /sys/kernel/config
        if [ -d /sys/kernel/config/usb_gadget ]; then
            echo "Configuring the USB gadget using ConfigFS..."
            cd /sys/kernel/config/usb_gadget
            mkdir g1
            cd g1
            mkdir strings/0x409
            mkdir configs/b.1
            mkdir configs/b.1/strings/0x409
            mkdir functions/mass_storage.0
            mkdir functions/ffs.adb
            mkdir functions/diag.diag
            mkdir functions/cser.dun.0
            mkdir functions/cser.nmea.1
            mkdir functions/rmnet_bam.rmnet
            mkdir functions/ncm.0
            echo "$serialno" > strings/0x409/serialnumber
            echo "QCOM" > strings/0x409/manufacturer
            echo "$socplatform" > strings/0x409/product
            echo "$product_string" > /config/usb_gadget/g1/strings/0x409/product
            setprop sys.usb.configfs 1
        fi
        
        if [ -d /sys/class/android_usb/android0 ]
        then
            echo "$product_string" > /sys/class/android_usb/android0/iProduct
        fi
        
        # mount functionfs
        mkdir -p /dev/usb-ffs/adb
        mount -o uid=2000,gid=2000 -t functionfs adb /dev/usb-ffs/adb
        mount -o remount,gid=5,mode=620 /dev/pts
        echo adb > /sys/class/android_usb/android0/f_ffs/aliases
        echo ffs > /sys/class/android_usb/android0/functions
        
        echo 0 > /sys/class/android_usb/android0/enable
        echo 0125 > /sys/class/android_usb/android0/idProduct
        echo 2C7C > /sys/class/android_usb/android0/idVendor
        echo diag > /sys/class/android_usb/android0/f_diag/clients
        echo 239 > /sys/class/android_usb/android0/bDeviceClass
        echo 2 > /sys/class/android_usb/android0/bDeviceSubClass
        echo 1 > /sys/class/android_usb/android0/bDeviceProtocol
        echo tty,smd,smd > /sys/class/android_usb/android0/f_serial/transports
        echo QTI,BAM_DMUX > /sys/class/android_usb/android0/f_rmnet/transports
        echo BAM_DMUX > /sys/class/android_usb/android0/f_usb_mbim/mbim_transports
        echo diag,serial,rmnet,ffs > /sys/class/android_usb/android0/functions
        echo 1 > /sys/class/android_usb/android0/remote_wakeup
        echo 1 > /sys/class/android_usb/android0/f_rndis/wceis
        sleep 10 # Wait 10 seconds here to give time to openqti to settle
        echo "Quectel, Incorporated" > /sys/class/android_usb/android0/iManufacturer
        echo "LTE Module" > /sys/class/android_usb/android0/iProduct
        echo 1 > /sys/class/android_usb/android0/enable
    ;;
    
    stop)
        echo "Stopping USB Android Gadget"
    ;;
    
    restart)
        $0 stop
        $0 start
    ;;
    *)
        echo "Usage usb { start | stop | restart}" >&2
        exit 1
    ;;
esac

